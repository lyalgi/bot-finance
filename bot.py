import logging
from aiogram import Bot, Dispatcher, executor, types
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
from flask import Flask

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
API_TOKEN = os.getenv('API_TOKEN')
SPREADSHEET_NAME = 'Business Tracker'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

# –°–æ–∑–¥–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_dict = {
    "type": os.getenv('GS_TYPE'),
    "project_id": os.getenv('GS_PROJECT_ID'),
    "private_key_id": os.getenv('GS_PRIVATE_KEY_ID'),
    "private_key": os.getenv('GS_PRIVATE_KEY').replace('\\n', '\n'),
    "client_email": os.getenv('GS_CLIENT_EMAIL'),
    "client_id": os.getenv('GS_CLIENT_ID'),
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": f"https://www.googleapis.com/robot/v1/metadata/x509/{os.getenv('GS_CLIENT_EMAIL').replace('@', '%40')}"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPE)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).worksheet("transactions")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

income_categories = ['–î—Ä–æ–≤–∞', '–£–≥–æ–ª—å', '–ú—É—Å–æ—Ä', '–°—ã–ø—É—á–∏–µ', '–î–æ—Å—Ç–∞–≤–∫–∞', '–ü–µ—Ä–µ–≥–Ω–æ–π']
expense_categories = ['–ì–°–ú', '–ó–∞–ø—á–∞—Å—Ç–∏', '–†–∞–±–æ—Ç–Ω–∏–∫-–∫–æ–ª—å—â–∏–∫', '–†–∞–±–æ—Ç–Ω–∏–∫-–ø–∏–ª—å—â–∏–∫', '–†–∞–±–æ—Ç–Ω–∏–∫-–ø–æ–≥—Ä—É–∑–∫–∞',
                      '–ó–∞–∫—É–ø –±–µ—Ä–µ–∑—ã', '–ó–∞–∫—É–ø —Å–æ—Å–Ω—ã', '–†–µ–∫–ª–∞–º–∞', '–ó–∞–∫—É–ø —É–≥–ª—è', '–î—Ä—É–≥–æ–µ']

user_state = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# üëâ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì• –î–æ—Ö–æ–¥", "üì§ –†–∞—Å—Ö–æ–¥", "üìä –û—Ç—á—ë—Ç")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# üëâ –î–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
@dp.message_handler(lambda message: message.text in ["üì• –î–æ—Ö–æ–¥", "üì§ –†–∞—Å—Ö–æ–¥"])
async def choose_type(message: types.Message):
    msg_type = "–¥–æ—Ö–æ–¥" if message.text == "üì• –î–æ—Ö–æ–¥" else "—Ä–∞—Å—Ö–æ–¥"
    user_state[message.from_user.id] = {"type": msg_type}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cats = income_categories if msg_type == "–¥–æ—Ö–æ–¥" else expense_categories
    [markup.add(cat) for cat in cats]
    await message.answer(f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {msg_type}–∞:", reply_markup=markup)


# üëâ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
@dp.message_handler(lambda message: message.text in income_categories + expense_categories)
async def ask_amount(message: types.Message):
    state = user_state.get(message.from_user.id, {})
    if not state:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ üì• –î–æ—Ö–æ–¥ –∏–ª–∏ üì§ –†–∞—Å—Ö–æ–¥")
    state['category'] = message.text
    user_state[message.from_user.id] = state
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")


# üëâ –í–≤–æ–¥ —Å—É–º–º—ã
@dp.message_handler(lambda message: message.text.isdigit())
async def save_transaction(message: types.Message):
    state = user_state.get(message.from_user.id, {})
    if not state or 'category' not in state:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")

    amount = float(message.text)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    tx_type = state['type']
    category = state['category']
    amortization = ""

    if tx_type == "–¥–æ—Ö–æ–¥":
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏–º –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é –∫–∞–∫ 10% —Ä–∞—Å—Ö–æ–¥
        amortization_value = round(amount * 0.10, 2)
        sheet.append_row([timestamp, "–¥–æ—Ö–æ–¥", category, amount, ""])
        sheet.append_row([timestamp, "—Ä–∞—Å—Ö–æ–¥", "–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è", amortization_value, "‚úÖ –∏–∑ –¥–æ—Ö–æ–¥–∞"])
        msg = f"üí∞ –î–æ—Ö–æ–¥ {category} –Ω–∞ {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω\nüìâ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {amortization_value}‚ÇΩ"
    else:
        sheet.append_row([timestamp, "—Ä–∞—Å—Ö–æ–¥", category, amount, ""])
        msg = f"üí∏ –†–∞—Å—Ö–æ–¥ {category} –Ω–∞ {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω"

    await message.answer(msg)
    user_state.pop(message.from_user.id, None)
    await send_welcome(message)


# üëâ –û—Ç—á—ë—Ç—ã
@dp.message_handler(lambda message: message.text == "üìä –û—Ç—á—ë—Ç")
async def report_menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–î–µ—Ç–∞–ª—å–Ω—ã–π", "Excel-—Ñ–∞–π–ª", "üîô –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=markup)


# üëâ –ù–∞–∑–∞–¥
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await send_welcome(message)


# üëâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
@dp.message_handler(lambda message: message.text in ["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–î–µ—Ç–∞–ª—å–Ω—ã–π", "Excel-—Ñ–∞–π–ª"])
async def generate_report(message: types.Message):
    data = sheet.get_all_records()
    today = datetime.now().date()

    if message.text == "–°–µ–≥–æ–¥–Ω—è":
        from_date = today
    elif message.text == "–ù–µ–¥–µ–ª—è":
        from_date = today - timedelta(days=7)
    elif message.text == "–ú–µ—Å—è—Ü":
        from_date = today - timedelta(days=30)
    else:
        from_date = None

    if message.text == "Excel-—Ñ–∞–π–ª":
        file_path = "transactions_export.csv"
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("–î–∞—Ç–∞,–¢–∏–ø,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–°—É–º–º–∞,–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n")
            for row in data:
                f.write(f"{row['timestamp']},{row['type']},{row['category']},{row['amount']},{row.get('amortization','')}\n")
        await message.answer_document(open(file_path, 'rb'))
        os.remove(file_path)
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
    filtered = []
    if from_date:
        for row in data:
            row_date = datetime.strptime(row['timestamp'], "%Y-%m-%d %H:%M:%S").date()
            if row_date >= from_date:
                filtered.append(row)
    else:
        filtered = data

    if message.text == "–î–µ—Ç–∞–ª—å–Ω—ã–π":
        incomes = {}
        expenses = {}
        for row in filtered:
            cat = row['category']
            amt = float(row['amount'])
            if row['type'] == '–¥–æ—Ö–æ–¥':
                incomes[cat] = incomes.get(cat, 0) + amt
            else:
                expenses[cat] = expenses.get(cat, 0) + amt
        msg = "üìä *–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç*\n\n"
        msg += "üí∞ –î–æ—Ö–æ–¥—ã:\n"
        for k, v in incomes.items():
            msg += f"‚Ä¢ {k}: {v}‚ÇΩ\n"
        msg += "\nüí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
        for k, v in expenses.items():
            msg += f"‚Ä¢ {k}: {v}‚ÇΩ\n"
        await message.answer(msg, parse_mode="Markdown")
        return

    # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
    income_sum = sum(float(r['amount']) for r in filtered if r['type'] == '–¥–æ—Ö–æ–¥')
    expense_sum = sum(float(r['amount']) for r in filtered if r['type'] == '—Ä–∞—Å—Ö–æ–¥')
    profit = income_sum - expense_sum
    if from_date:
        period_start = format_date_rus(from_date)
    else:
        period_start = "–Ω–∞—á–∞–ª–∞"
    period_end = format_date_rus(today)

    msg = f"üìÜ –ü–µ—Ä–∏–æ–¥: —Å {period_start} –ø–æ {period_end}\n"

    msg += f"üí∞ –î–æ—Ö–æ–¥—ã: {income_sum}‚ÇΩ\n"
    msg += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expense_sum}‚ÇΩ\n"
    msg += f"üìà –ü—Ä–∏–±—ã–ª—å: {profit}‚ÇΩ"
    await message.answer(msg)

# üëâ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    from threading import Thread
    from flask import Flask
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ['API_TOKEN', 'GS_TYPE', 'GS_PROJECT_ID', 'GS_PRIVATE_KEY_ID', 
                   'GS_PRIVATE_KEY', 'GS_CLIENT_EMAIL', 'GS_CLIENT_ID']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        exit(1)

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Flask-—Å–µ—Ä–≤–µ—Ä
    app = Flask(__name__)

    @app.route('/')
    def health_check():
        return "Telegram Bot is running", 200

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=lambda: executor.start_polling(dp, skip_updates=True)).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É 8080 (–¥–ª—è Timeweb)
    app.run(host='0.0.0.0', port=8080)

